buildscript {
    dependencies {
        classpath 'commons-io:commons-io:2.4'
        classpath 'commons-lang:commons-lang:2.6'
    }
    repositories {
        mavenCentral()
    }
}

import org.apache.commons.io.FileUtils
import org.apache.commons.lang.SystemUtils

import java.nio.file.Files
import java.nio.file.attribute.PosixFilePermission

repositories {
    mavenLocal()
    maven { url 'http://repo.jenkins-ci.org/releases/' }
    jcenter()
    mavenCentral()
}

configurations {
    jenkinsWar
    jenkinsPlugins
}

dependencies {
    jenkinsWar(group: 'org.jenkins-ci.main', name: 'jenkins-war', version: project.ext.jenkinsVersion, ext: 'war')
}
apply from: 'plugins.gradle'

defaultTasks 'prepareJenkins'

task(prepareJenkins).doLast {
    File jenkinsHome = prepareJenkinsHome()
    File jenkinsWar = prepareJenkinsWar()
    createRunJenkinsScript(jenkinsHome, jenkinsWar)
}

private File prepareJenkinsWar() {
    def configuration = project.configurations.getByName('jenkinsWar')
    def files = configuration.resolve()
    def war = files.first()
    return war
}

private File prepareJenkinsHome() {
    File jenkinsHome = getJenkinsHome()
    createOrUpdateBaseConfig(jenkinsHome)
    preparePluginsDir(jenkinsHome)
    return jenkinsHome
}

private File getJenkinsHome() {
    def jenkinsHome = new File(System.getProperty('user.home'), "${project.name}_jenkins_home")
    if (project.hasProperty('localJenkinsHome')) {
        jenkinsHome = new File(project.ext.localJenkinsHome)
    }
    return jenkinsHome
}

private void createOrUpdateBaseConfig(File jenkinsHome) {
    FileUtils.copyDirectory(new File('./jenkins-bootstrap/'), jenkinsHome.absoluteFile)
}

private void preparePluginsDir(File jenkinsHome) {
    def pluginsDir = new File(jenkinsHome, 'plugins/')

    // copied from gradle-jpi-plugin
    // create new configuration with plugin dependencies, ignoring the (jar) extension to get the HPI/JPI files
    Configuration plugins = project.configurations.create('plugins')
    project.configurations.getByName('jenkinsPlugins').dependencies.each {
        project.dependencies.add(plugins.name, "${it.group}:${it.name}:${it.version}")
    }

    // copy the resolved HPI/JPI files to the plugins directory
    plugins.resolvedConfiguration.resolvedArtifacts.findAll { it.extension in ['hpi', 'jpi'] }.each {
        GFileUtils.copyFile(it.file, new File(pluginsDir, "${it.name}.${it.extension}"))
    }

    // pin particular plugins
    new File(pluginsDir.absolutePath + '/credentials.jpi.pinned').createNewFile()
}

private void createRunJenkinsScript(File jenkinsHome, File jenkinsWar) {
    def dslProjectRoot = project.projectDir
    def javaParameters = " -DJENKINS_HOME=${jenkinsHome.absolutePath}" +
        " -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005" +
        " -Dhudson.model.ParametersAction.keepUndefinedParameters=true" +
        " -DDSL_PROJECT_ROOT=${dslProjectRoot.absolutePath}" +
        " -jar ${jenkinsWar.absolutePath}" + " --webroot=${jenkinsHome.absolutePath}/war" +
        " --httpPort=8080"

    createScript('runJenkins', """\
        #!/bin/sh
        cd ${jenkinsHome.absolutePath};
        java ${javaParameters}
    """.stripIndent())
}

private void createScript(String filename, String scriptText) {
    def extension = SystemUtils.IS_OS_WINDOWS ? '.bat' : '.sh'
    def scriptFile = new File(filename + extension)
    scriptFile.text = scriptText
    if (SystemUtils.IS_OS_UNIX) {
        Files.setPosixFilePermissions(scriptFile.toPath(), [PosixFilePermission.OWNER_READ,
                                                            PosixFilePermission.OWNER_WRITE,
                                                            PosixFilePermission.OWNER_EXECUTE,] as Set)
    }
}

